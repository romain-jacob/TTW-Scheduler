%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% system_configuration_pendulum.m
% Configuration file for the whole system, including
% processors, applications, tasks, messages and custom contraints
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TTW use case: pendulum network
% - 5 pendulums with one remote controller (6 nodes)
% - 2 "real-time-processes" with one remote controller (3 nodes)
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Romain Jacob, last update 27.06.19
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Log
%
% 27.06.16:
%  + added documentation for custom constraints
% 
% 19.06.16:
%  + added support for custom constraints
% 
% 18.06.19:
%  + Modify the format of the file for improved usability
% 

%% Round model 
% 
% A round composed of B slots as the following length:
%   T_round(B) = T_per_round + B * T_per_slot

global T_per_slot T_per_round B_max T_max L_max N H;

L_max   = 16;   % Maximum payload size
N       = 2;    % Number of retransmissions for the Glossy floods
H       = 4;    % Provisioned network diameter
B_max   = 5;    % Maximum number of slots per round
T_max   = 30000; % Maximum inter-round interval 
                % to preserve time synchronization (30s)
                
[T_per_slot , T_per_round] = loadRoundModel(L_max, N, H) ;

%% Processors
% Tuple: 
% - API_ID = 1: ID - ***empty by initial configuration
% - API_NM = 2: Name
% - API_MP = 3: Mapping - ***empty by initial configuration
% - API_CP = 4: Collision Pairs - ***empty by initial configuration

APs = {...
    { [],'AP_real1',{},{} }, ...
    { [],'AP_real2',{},{} }, ...
    { [],'AP_sim3',{},{} }, ...
    { [],'AP_sim4',{},{} }, ...
    { [],'AP_sim5',{},{} }, ...
    { [],'AP_ctrl',{},{} }, ...
    { [],'AP_rt_1',{},{} }, ...
    { [],'AP_rt_2',{},{} }, ...
    { [],'AP_rt_ctrl',{},{} }, ...
    };
   
%%
% configuration of tasks
% Tuple: 
% - TI_ID = 1: ID ***empty by initial configuration
% - TI_NM = 2: Name                     /!\ --- MUST START WITH 'T' --- /!\
% - TI_MP = 3: Mapping
% - TI_ET = 4: Execution Time
% - TI_PD = 5: Period - ***-1 by initial configuration
% - TI_NI = 6: Number of Instances - ***-1 by initial configuration

Tasks = { ...
 { [],  'T_loc_stab1',    'AP_real1',   5,-1,-1}, ...
 { [],  'T_loc_stab2',    'AP_real2',   5,-1,-1}, ...
 { [],  'T_loc_stab3',    'AP_sim3',    5,-1,-1}, ...
 { [],  'T_loc_stab4',    'AP_sim4',    5,-1,-1}, ...
 { [],  'T_loc_stab5',    'AP_sim5',    5,-1,-1}, ...
 { [],  'T_sens1',        'AP_real1',   3,-1,-1}, ...
 { [],  'T_sens2',        'AP_real2',   3,-1,-1}, ...
 { [],  'T_act1',         'AP_real1',   1,-1,-1}, ...
 { [],  'T_act2',         'AP_real2',   1,-1,-1}, ...
 { [],  'T_rmt_ctrl',     'AP_ctrl',    3,-1,-1}, ...
 { [],  'T_fetch_sens1',  'AP_real1',   1,-1,-1}, ...
 { [],  'T_fetch_sens2',  'AP_real2',   1,-1,-1}, ...
 { [],  'T_fetch_sens3',  'AP_sim3',    1,-1,-1}, ...
 { [],  'T_fetch_sens4',  'AP_sim4',    1,-1,-1}, ...
 { [],  'T_fetch_sens5',  'AP_sim5',    1,-1,-1}, ...
 { [],  'T_deliv_act1',   'AP_real1',   1,-1,-1}, ...
 { [],  'T_deliv_act2',   'AP_real2',   1,-1,-1}, ...
 { [],  'T_deliv_act3',   'AP_sim3',    1,-1,-1}, ...
 { [],  'T_deliv_act4',   'AP_sim4',    1,-1,-1}, ...
 { [],  'T_deliv_act5',   'AP_sim5',    1,-1,-1}, ...
 { [],  'T_sync_ctrl',    'AP_ctrl',    3,-1,-1}, ...
 { [],  'T_sync_ctrl1',    'AP_real1',    3,-1,-1}, ...
 { [],  'T_sync_ctrl2',    'AP_real2',    3,-1,-1}, ...
 { [],  'T_sync_ctrl3',    'AP_sim3',    3,-1,-1}, ...
 { [],  'T_sync_ctrl4',    'AP_sim4',    3,-1,-1}, ...
 { [],  'T_sync_ctrl5',    'AP_sim5',    3,-1,-1}, ...
 { [],  'T_rt_in',    'AP_rt_ctrl', 1,-1,-1}, ...
 { [],  'T_rt_out1',  'AP_rt_1',    20,-1,-1}, ...
 { [],  'T_rt_out2',  'AP_rt_2',    20,-1,-1}, ...
 };
     

%%
% configuration of messages
% Tuple: 
% - MI_ID = 1: ID 
% - MI_NM = 2: Name                     /!\ --- MUST START WITH 'M' --- /!\
% - MI_PD = 3: Period - ***-1 for initial configuration
% - MI_NI = 4: Number of instances - ***-1 for initial configuration
% - MI_LD = 5: Load(numer of slots needed)
Msgs = { ...
 { [],  'M_sens1',      -1,-1,1}, ...
 { [],  'M_sens2',      -1,-1,1}, ...
 { [],  'M_act1',       -1,-1,1}, ...
 { [],  'M_act2',       -1,-1,1}, ...
 { [],  'M_sync1',      -1,-1,1}, ...
 { [],  'M_sync2',      -1,-1,1}, ...
 { [],  'M_sync3',      -1,-1,1}, ...
 { [],  'M_sync4',      -1,-1,1}, ...
 { [],  'M_sync5',      -1,-1,1}, ...
 { [],  'M_sync_act',   -1,-1,1}, ...
 { [],  'M_rt',         -1,-1,1}, ...
 };

%%
% configuration of applications
% Tuple: 
% - AI_ID = 1: ID 
% - AI_NM = 2: Name
% - AI_PD = 3: Period
% - AI_DL = 4: Deadline
% - AI_TC = 5: Task chain
% - AI_NI = 6: Numer of instances - *** empty by initial configuration

APPs = { ...
 { [],  'a_loc_stab1',      10,10,{'T_loc_stab1'}}, ...
 { [],  'a_loc_stab2',      10,10,{'T_loc_stab2'}}, ...
 { [],  'a_loc_stab3',      10,10,{'T_loc_stab3'}}, ...
 { [],  'a_loc_stab4',      10,10,{'T_loc_stab4'}}, ...
 { [],  'a_loc_stab5',      10,10,{'T_loc_stab5'}}, ...
 { [],  'a_rmt_stab1',      40,80,{'T_sens1',   'M_sens1',      'T_rmt_ctrl',   'M_act1',      'T_act1'}}, ...
 { [],  'a_rmt_stab2',      40,80,{'T_sens2',   'M_sens2',      'T_rmt_ctrl',   'M_act2',      'T_act2'}}, ...
 { [],  'a_sync1',          50,50,{'T_fetch_sens1','M_sync1','T_sync_ctrl1'}}, ...
 { [],  'a_sync2',          50,50,{'T_fetch_sens2','M_sync2','T_sync_ctrl2'}}, ...
 { [],  'a_sync3',          50,50,{'T_fetch_sens3','M_sync3','T_sync_ctrl3'}}, ...
 { [],  'a_sync4',          50,50,{'T_fetch_sens4','M_sync4','T_sync_ctrl4'}}, ...
 { [],  'a_sync5',          50,50,{'T_fetch_sens5','M_sync5','T_sync_ctrl5'}}, ...
 { [],  'a_rt_in1',         100, 80,{'T_rt_in','M_rt','T_rt_out1'}}, ...
 { [],  'a_rt_in2',         100, 80,{'T_rt_in','M_rt','T_rt_out2'}}, ...
 };      

%%
% Custom constraints
%
% Usage: 
% - Custom contraints can be set between the offsets of any tasks and
% messages. 
% - Only linear constraints are supported.
% - Both equality and inequality are possible.
% - The left-hand-side of the constraint is a set of terms. Each term
% contains the variable name (either a task or a message) and a
% multiplicative coefficient (any real number).
% - The scheduler automatically parses the user-defined constraints and add
% them to the synthesis problem.
% 
% Example use case:
% - Forcing the synchronization of multiple tasks
%
% Tuple:
% - CCI_LHS = 1: Left-hand side of constraint
%   Tuple:
%   + CCI_VAR  = 1 - Variable name in constraint terms
%   + CCI_COEF = 2 - Multiplicative coeficient in constraint terms
%   + CCI_VID  = 3 - ID of the variable (task=1 or message=2) *** empty by initial configuration
% - CCI_SGN = 2: Sign of constraint 
% 
% Valid: '=' or '<'
% /!\ the inequality contraints are interpreted as loose!
% /!\ '<' actually means '<='
% - CCI_RHS = 3: Right-hand side of constraint, must be a constant

CustomConstaints = { ...
    { {{'T_loc_stab1', 1},{'T_loc_stab2', -1}}, '=', 0}, ...
    { {{'T_loc_stab1', 1},{'T_loc_stab3', -1}}, '=', 0}, ...
    { {{'T_loc_stab1', 1},{'T_loc_stab4', -1}}, '=', 0}, ...
    { {{'T_loc_stab1', 1},{'T_loc_stab5', -1}}, '=', 0}, ...
    };

%% ModeApps
% Tuple:
% - MAI_ID = 1: ID ***empty by initial configuration
% - MAI_PR = 2: Priority
% - MAI_TA = 3: Total applications running
% - MAI_FA = 4: Free applications - ***empty by initial configuration
% - MAI_LA = 5: Legacy applications - ***empty by initial configuration
% - MAI_VA = 6: Virtual legacy applications - ***empty by initial configuration
ModeApps = {...
    ... Local stabilization
    { [], 2, {...
            'a_loc_stab1','a_loc_stab2','a_loc_stab3','a_loc_stab4','a_loc_stab5',...
            'a_rt_in1','a_rt_in2'...
                        },{},{},{}}, ...
    ... Remote stabilization                  
    { [], 1, {...
            'a_rmt_stab1', ... 
            'a_loc_stab2','a_loc_stab3','a_loc_stab4','a_loc_stab5',...
            'a_rt_in1','a_rt_in2'...
            },{},{},{} }, ...  
    ... Synchronization (control is done locally)
    { [], 3, {...
            'a_sync1','a_sync2','a_sync3', ...
            ... 'a_sync1','a_sync2','a_sync3','a_sync4','a_sync5',...
            'a_rt_in1','a_rt_in2'...
            },{},{},{}}, ...
};

%% ModeTransitionMatrix
% defines transition between modes. 
% - ModeTransitionMatrix(i,j) = 1 - transition from i to j
% - ModeTransitionMatrix(i,j) = 0 - no transition from i to j
ModeTransitionMatrix = ones(numel(ModeApps));
% ModeTransitionMatrix = eye(numel(ModeApps));
